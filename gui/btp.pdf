#!/usr/bin/env python

import pygtk
pygtk.require('2.0')
import gtk

class Indurator_UI:
    def hello(self, widget, data=None):
        print "Hello World"

    def delete_event(self, widget, event, data=None):
        print "Delete event occured"
        return False

    def destroy(self,widget, data=None):
        gtk.main_quit()

    def toggle_snap(self, widget, spin):
        spin.set_snap_to_ticks(widget.get_active())

    def toggle_numeric(self, widget, spin):
        spin.set_numeric(widget.get_active())

    def change_digits(self, widget, spin, spin1):
        spin1.set_digits(spin.get_value_as_int())

    def get_value(self, widget, data, spin, spin2, label):
        if data == 1:
            buf = "%d" % spin.get_value_as_int()
        else:
            buf = "%0.*f" % (spin2.get_value_as_int(),
                             spin.get_value())
        label.set_text(buf)


    def __init__(self):
        # Initialize an empty window
        window = gtk.Window(gtk.WINDOW_TOPLEVEL)

        # Bind delete and destroy events of window
        window.connect("delete_event", self.delete_event)
        window.connect("destroy", self.destroy)

        # Set window properties
        window.set_border_width(10)
        window.set_title("Virtual Indurator")
        window.set_position(gtk.WIN_POS_CENTER_ALWAYS)

        # Add widgets to window
        main_vbox = gtk.VBox(False, 5)
        main_vbox.set_border_width(10)

        frame = gtk.Frame("Furnace Dimensions")
        main_vbox.pack_start(frame, True, True, 0)
        window.add(main_vbox)

        vbox = gtk.VBox(False, 0)
        vbox.set_border_width(5)
        frame.add(vbox)
        
        # Day, month, year spinners
        hbox = gtk.HBox(False, 0)
        vbox.pack_start(hbox, True, True, 5)
  
        vbox2 = gtk.VBox(False, 0)
        hbox.pack_start(vbox2, True, True, 5)

        label = gtk.Label("Grate Length :")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)
  
        adj = gtk.Adjustment(1.0, 1.0, 31.0, 1.0, 5.0, 0.0)
        spinner = gtk.SpinButton(adj, 0, 0)
        spinner.set_wrap(True)
        vbox2.pack_start(spinner, False, True, 0)
  
        vbox2 = gtk.VBox(False, 0)
        hbox.pack_start(vbox2, True, True, 5)
  
        label = gtk.Label("Grate Area :")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)

        adj = gtk.Adjustment(1.0, 1.0, 12.0, 1.0, 5.0, 0.0)
        spinner = gtk.SpinButton(adj, 0, 0)
        spinner.set_wrap(True)
        vbox2.pack_start(spinner, False, True, 0)

        hbox2 = gtk.HBox(False, 0)
        vbox.pack_start(hbox2, True, True, 5)

        vbox2 = gtk.VBox(False, 0)
        hbox2.pack_start(vbox2, True, True, 5)
  
        label = gtk.Label("No. of windboxes :")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)
  
        adj = gtk.Adjustment(1998.0, 0.0, 2100.0, 1.0, 100.0, 0.0)
        spinner = gtk.SpinButton(adj, 0, 0)
        spinner.set_wrap(False)
        spinner.set_size_request(55, -1)
        vbox2.pack_start(spinner, False, True, 0)
  
        frame = gtk.Frame("Pellet/Bed Properties")
        main_vbox.pack_start(frame, True, True, 0)
  
        vbox = gtk.VBox(False, 0)
        vbox.set_border_width(5)
        frame.add(vbox)
  
        hbox = gtk.HBox(False, 0)
        vbox.pack_start(hbox, False, True, 5)
  
        vbox2 = gtk.VBox(False, 0)
        hbox.pack_start(vbox2, True, True, 5)
  
        label = gtk.Label("Mean Pellet Diameter(mm) ")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)
  
        adj = gtk.Adjustment(0.0, -10000.0, 10000.0, 0.5, 100.0, 0.0)
        spinner1 = gtk.SpinButton(adj, 1.0, 2)
        spinner1.set_wrap(True)
        spinner1.set_size_request(100, -1)
        vbox2.pack_start(spinner1, False, True, 0)
  
        vbox2 = gtk.VBox(False, 0)
        hbox.pack_start(vbox2, True, True, 5)
  
        label = gtk.Label("Pellet Moisture Content(wt%)")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)
  
        adj = gtk.Adjustment(2, 1, 5, 1, 1, 0)
        spinner2 = gtk.SpinButton(adj, 0.0, 0)
        spinner2.set_wrap(True)
        vbox2.pack_start(spinner2, False, True, 0)

        hbox2 = gtk.HBox(False, 0)
        vbox.pack_start(hbox2, False, True, 5)

        vbox2 = gtk.VBox(False, 0)
        hbox2.pack_start(vbox2, True, True, 5)

        label = gtk.Label("Critical Pellet Moisture Content(wt%) ")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)

        adj = gtk.Adjustment(0.0, -10000.0, 10000.0, 0.5, 100.0, 0.0)
        spinner1 = gtk.SpinButton(adj, 1.0, 2)
        spinner1.set_wrap(True)
        spinner1.set_size_request(100, -1)
        vbox2.pack_start(spinner1, False, True, 0)

        vbox2 = gtk.VBox(False, 0)
        hbox2.pack_start(vbox2, True, True, 5)

        label = gtk.Label("Coke mean size(mm)")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)

        adj = gtk.Adjustment(2, 1, 5, 1, 1, 0)
        spinner2 = gtk.SpinButton(adj, 0.0, 0)
        spinner2.set_wrap(True)
        vbox2.pack_start(spinner2, False, True, 0)

        hbox3 = gtk.HBox(False, 0)
        vbox.pack_start(hbox3, False, True, 5)

        vbox2 = gtk.VBox(False, 0)
        hbox3.pack_start(vbox2, True, True, 5)

        label = gtk.Label("Limestone mean size(mm) ")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)

        adj = gtk.Adjustment(0.0, -10000.0, 10000.0, 0.5, 100.0, 0.0)
        spinner1 = gtk.SpinButton(adj, 1.0, 2)
        spinner1.set_wrap(True)
        spinner1.set_size_request(100, -1)
        vbox2.pack_start(spinner1, False, True, 0)

        vbox2 = gtk.VBox(False, 0)
        hbox3.pack_start(vbox2, True, True, 5)

        label = gtk.Label("Coke breeze(wt%)")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)

        adj = gtk.Adjustment(2, 1, 5, 1, 1, 0)
        spinner2 = gtk.SpinButton(adj, 0.0, 0)
        spinner2.set_wrap(True)
        vbox2.pack_start(spinner2, False, True, 0)

        frame = gtk.Frame("Process Conditions")
        main_vbox.pack_start(frame, True, True, 0)

        vbox = gtk.VBox(False, 0)
        vbox.set_border_width(5)
        frame.add(vbox)

        hbox = gtk.HBox(False, 0)
        vbox.pack_start(hbox, True, True, 5)

        vbox2 = gtk.VBox(False, 0)
        hbox.pack_start(vbox2, True, True, 5)

        label = gtk.Label("Grate Speed :")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)

        adj = gtk.Adjustment(1.0, 1.0, 31.0, 1.0, 5.0, 0.0)
        spinner = gtk.SpinButton(adj, 0, 0)
        spinner.set_wrap(True)
        vbox2.pack_start(spinner, False, True, 0)

        vbox2 = gtk.VBox(False, 0)
        hbox.pack_start(vbox2, True, True, 5)

        label = gtk.Label("Bed Height :")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)

        adj = gtk.Adjustment(1.0, 1.0, 12.0, 1.0, 5.0, 0.0)
        spinner = gtk.SpinButton(adj, 0, 0)
        spinner.set_wrap(True)
        vbox2.pack_start(spinner, False, True, 0)

        hbox2 = gtk.HBox(False, 0)
        vbox.pack_start(hbox2, True, True, 5)

        vbox2 = gtk.VBox(False, 0)
        hbox2.pack_start(vbox2, True, True, 5)

        label = gtk.Label("Hearth Layer Height :")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)

        adj = gtk.Adjustment(1998.0, 0.0, 2100.0, 1.0, 100.0, 0.0)
        spinner = gtk.SpinButton(adj, 0, 0)
        spinner.set_wrap(False)
        spinner.set_size_request(55, -1)
        vbox2.pack_start(spinner, False, True, 0)

        frame = gtk.Frame("Recuperating Hood temperature profile")
        main_vbox.pack_start(frame, True, True, 0)

        vbox = gtk.VBox(False, 0)
        vbox.set_border_width(5)
        frame.add(vbox)

        hbox = gtk.HBox(False, 0)
        vbox.pack_start(hbox, True, True, 5)

        vbox2 = gtk.VBox(False, 0)
        hbox.pack_start(vbox2, True, True, 5)

        label = gtk.Label("Hood temperature at 46m")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)

        adj = gtk.Adjustment(1.0, 1.0, 31.0, 1.0, 5.0, 0.0)
        spinner = gtk.SpinButton(adj, 0, 0)
        spinner.set_wrap(True)
        vbox2.pack_start(spinner, False, True, 0)

        vbox2 = gtk.VBox(False, 0)
        hbox.pack_start(vbox2, True, True, 5)

        label = gtk.Label("Hood temperature at 50m")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)

        adj = gtk.Adjustment(1.0, 1.0, 12.0, 1.0, 5.0, 0.0)
        spinner = gtk.SpinButton(adj, 0, 0)
        spinner.set_wrap(True)
        vbox2.pack_start(spinner, False, True, 0)

        hbox2 = gtk.HBox(False, 0)
        vbox.pack_start(hbox2, True, True, 5)

        vbox2 = gtk.VBox(False, 0)
        hbox2.pack_start(vbox2, True, True, 5)
  
        label = gtk.Label("Hood temperature at 100m")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)
  
        adj = gtk.Adjustment(1998.0, 0.0, 2100.0, 1.0, 100.0, 0.0)
        spinner = gtk.SpinButton(adj, 0, 0)
        spinner.set_wrap(False)
        spinner.set_size_request(55, -1)
        vbox2.pack_start(spinner, False, True, 0)

        vbox2 = gtk.VBox(False, 0)
        hbox2.pack_start(vbox2, True, True, 5)
  
        label = gtk.Label("Hood temperature at 150m")
        label.set_alignment(0, 0.5)
        vbox2.pack_start(label, False, True, 0)
  
        adj = gtk.Adjustment(1998.0, 0.0, 2100.0, 1.0, 100.0, 0.0)
        spinner = gtk.SpinButton(adj, 0, 0)
        spinner.set_wrap(False)
        spinner.set_size_request(55, -1)
        vbox2.pack_start(spinner, False, True, 0)


        hbox = gtk.HBox(False, 0)
        main_vbox.pack_start(hbox, False, True, 0)
  
        button = gtk.Button("Reset")
        button.connect("clicked", lambda w: gtk.main_quit())
        hbox.pack_start(button, True, True, 5)

        button2 = gtk.Button("Calculate")
        hbox.pack_start(button2, True, True, 5)
        window.show_all()

    def main(self):
        gtk.main()


class Welcome:
    def delete_event(self, widget, event, data=None):
        print "Delete event occured"
        return False

    def destroy(self,widget, data=None):
        gtk.main_quit()

    def __init__(self):
                # Initialize an empty window
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)

        # Bind delete and destroy events of window
        self.window.connect("delete_event", self.delete_event)
        self.window.connect("destroy", self.destroy)

        # Set window properties
        self.window.set_border_width(10)
        self.window.set_title("Virtual Indurator")
        self.window.set_position(gtk.WIN_POS_CENTER_ALWAYS)

        vbox = gtk.VBox(False, 0)
        self.window.add(vbox)

        image = gtk.Image()
        image.set_from_file('indurator.jpg')
        image.show()
        vbox.pack_start(image, True, True, 0)

        button = gtk.Button("Start")
        button.connect("clicked", self.destroy)
        vbox.pack_start(button, True, True, 0)
        self.window.show_all()

    def main(self):
        gtk.main()

if __name__ == "__main__":

    welcome = Welcome()
    welcome.main()

    hello = Indurator_UI()
    hello.main()
